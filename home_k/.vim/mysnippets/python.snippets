

snippet ak "override akw" i
*args, **kwargs
endsnippet

# --------------------------------------------
# debug
# --------------------------------------------

snippet elp "calc elapsed time for code block"
import time # FIXME: delete me
st = time.time() # FIXME: delete me
${VISUAL}
delta = round(time.time() - st, 4) # FIXME: delete me
# print("Elapsed %s sec", delta) # FIXME: delete me
LOGGER.info("Elapsed %s sec", delta) # FIXME: delete me
endsnippet

# --------------------------------------------
# exceptions
# --------------------------------------------

snippet ex "except Exception as e" b
except ${1:Exception} as ${2:e}:
    LOGGER.exception("Error occurred: %s", e)
endsnippet

snippet except "except Exception as e" b
except ${1:Exception} as ${2:e}:
    LOGGER.exception("Error occurred: %s", e)
endsnippet

# --------------------------------------------
# typing
# --------------------------------------------

snippet t "import typing as t" b
import typing as t
endsnippet


snippet tun "typing Union"
t.Union[${1:${VISUAL}}, ${2:None}]
endsnippet

snippet ttu "typing Union"
t.Tuple[${1:${VISUAL}}, $2]
endsnippet

# --------------------------------------------
# function
# --------------------------------------------

snippet f "function" b
def
endsnippet

# --------------------------------------------
# print
# --------------------------------------------

snippet pr
print(${1:${VISUAL}})
endsnippet

snippet prhl
$2("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
${2:print}("${1:${VISUAL}}")
$2("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
endsnippet

snippet pprhl
$2("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
${2:__import__('pprint').pprint}("${1:${VISUAL}}")
$2("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
endsnippet

# --------------------------------------------
# logger
# --------------------------------------------

snippet simplelogging "description"
import logging
LOGGER = logging.getLogger()
LOGGER.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
ch.setFormatter(logging.Formatter('%(asctime)s [%(levelname)s] %(message)s'))
LOGGER.addHandler(ch)
endsnippet
    

snippet Lihl
$2.info("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
${2:LOGGER}.info("${1:${VISUAL}}")
$2.info("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
endsnippet


snippet L
${2:LOGGER}.log("${1:${VISUAL}}")
endsnippet

snippet Ld
${2:LOGGER}.debug("${1:${VISUAL}}")
endsnippet

snippet Li
${2:LOGGER}.info("${1:${VISUAL}}")
endsnippet

snippet Lw
${2:LOGGER}.warning("${1:${VISUAL}}")
endsnippet

snippet Ler
${2:LOGGER}.error("${1:${VISUAL}}")
endsnippet

snippet Le
${2:LOGGER}.exception("${1:${VISUAL}}")
endsnippet

snippet Lc
${2:LOGGER}.critical("${1:${VISUAL}}")
endsnippet

snippet Lip
${2:LOGGER}.info(__import__("pprint").pformat(${1:${VISUAL}}))
endsnippet

snippet Lif
${2:LOGGER}.info(__import__("pprint").pformat(${1:${VISUAL}}))
endsnippet

# --------------------------------------------
# loop
# --------------------------------------------

snippet fore "for...enumerate"
for ${1:idx}, ${2:value} in enumerate(${VISUAL}):
	${0:pass}
endsnippet

# --------------------------------------------
# dict
# --------------------------------------------

snippet dg "dict get"
${3:$2} = ${1:d}.get("${2:t}")
endsnippet

snippet dgs "dict get with square brackets" b
${3:$2} = ${1:d}["${2:t}"]
endsnippet


snippet dgd "dict get with default"
${4:$2} = ${1:d}.get("${2:t}", ${3:None})
endsnippet

snippet dgif "dict get if"
${3:$2} = ${1:d}.get("${2:t}")
if $2:
	${4:pass}
else:
	${5:pass}
endsnippet

snippet forkv "dict"
for ${1:key}, ${2:value} in ${3:d}.items():
	${0:pass}
endsnippet

snippet fork "dict"
for ${1:key} in ${2:d}:
	${0:pass}
endsnippet

snippet forv "dict"
for ${1:value} in ${2:d}.values():
	${0:pass}
endsnippet

snippet dfd "default dict"
from collections import defaultdict
${2:d} = defaultdict(${1})
endsnippet

# --------------------------------------------
# attr
# --------------------------------------------

snippet geta "attr"
${2:attr} = getattr(${1:obj}, None)
endsnippet

snippet getaif "attr if True"
${3:attr} = getattr(${1:obj}, "${2:}", None)
if $3:
    ${4:pass}
endsnippet

# --------------------------------------------
# requests
# --------------------------------------------

snippet r "requests"
import requests
${0:r} = requests.request(${1:method}, ${2:url}, *args, **kwargs)
endsnippet

snippet rget "requests"
import requests
${0:r} = requests.get(${1:url}, params=${2:None})
endsnippet

snippet rpost "requests"
import requests
${0:r} = requests.post(${1:url}, json=${3:None})
endsnippet

snippet rpat "requests patch"
import requests
${0:r} = requests.patch(${1:url}, json=${2:None})
endsnippet

snippet rdel "requests delete"
import requests
${0:r} = requests.delete(${1:url})
endsnippet

# --------------------------------------------
# path
# --------------------------------------------

snippet dirp "dir abspath" b
import os
os.path.dirname(os.path.abspath(__file__))
endsnippet

snippet curdir "dir abspath" b
import os
os.path.dirname(os.path.abspath(__file__))
endsnippet

# --------------------------------------------
# import
# --------------------------------------------

snippet urlj "import urljoin; urljoin(a, b)" b
from urllib.parse import urljoin
${0:url} = urljoin(${1:arg1}, ${2:url2})
endsnippet

# --------------------------------------------
# print
# --------------------------------------------

snippet ppr "import pprint and print" b
__import__('pprint').pprint(${1:${VISUAL}})
endsnippet

snippet pfm "import pprint and print" b
__import__('pprint').pformat(${1:${VISUAL}})
endsnippet

# --------------------------------------------
# doc
# --------------------------------------------

# snippet mdoc "Description" b
# endsnippet

snippet par "param in doc"
:param $1: $2
endsnippet

snippet ret "return in doc" b
:return: $0
endsnippet


# --------------------------------------------
# func
# --------------------------------------------

snippet ldef "lazy def with lazy doc" b
def ${1:func_name}():
    """ ${1/_/ /g} """
    ${0:pass}

endsnippet

# --------------------------------------------
# class
# --------------------------------------------

snippet _str "__str__ and __repr__" b
def __str__(self):
    return f"<{self.__class__.__name__}>"

__repr__ = __str__
endsnippet

# --------------------------------------------
# others
# --------------------------------------------

snippet ifm "if __main__" b
def main():
    """main function"""
    pass


if __name__ == "__main__":
    main()
endsnippet


snippet singletonnew "Singleton via __new__" b
def __new__(cls, *args, **kw):
    if not hasattr(cls, '_instance'):
        cls._instance = super().__new__(cls, *args, **kw)
    return cls._instance
endsnippet

# snippet singletonnew2 "another Singleton via __new__" b
#     _state = {}
#     def __new__(cls, *args, **kw):
#         ob = super().__new__(cls, *args, **kw)
#         ob.__dict__ = cls._state
#         return ob
# endsnippet

# sqlite
snippet sqlite "sqlite3 template" b
import sqlite3
db_path = "$1"
con = sqlite3.connect(db_path)
try:
    cur = con.cursor()
    sql = "$2"
    params = [$3]
    cur.execute(sql, params)
    con.commit()
except Exception as e:
    raise e
finally:
    con.close()
endsnippet

snippet sqlitewith "sqlite3 template context version" b
import sqlite3
db_path = "$1"
with sqlite3.connect(db_path) as con:
    cur = con.cursor()
    sql = "$2"
    params = [$3]
    cur.execute(sql, params)
    con.commit()
endsnippet

# mysql
snippet mysqlexec "exec mysql with pymysql" b
import pymysql
import logging

LOGGER = logging.getLogger(__name__)

conn = pymysql.connect(
    host="${1:localhost}",
    port=${2:3306},
    user="${3:root}",
    password="${4}",
    db="${5:mysql}",
    charset='utf8',
    cursorclass=pymysql.cursors.DictCursor,
)

sql = """
${0}
"""

args = None

try:
    with conn.cursor() as cursor:
        cursor.execute(sql, args)
        LOGGER.debug("Executed %s", cursor._last_executed)
        ret = cursor.fetchall()
    conn.commit()
except:
    LOGGER.warning("Failed when trying sql: %s with args: %s.", sql, args)
finally:
    conn.close()
endsnippet


snippet djangoscriptheader "header code for script" b
import os
import sys

import django

project_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
print(project_dir)
sys.path.append(project_dir)
os.environ.setdefault('DJANGO_SETTINGS_MODULE', '${0:projectname}.settings')
django.setup()
endsnippet
